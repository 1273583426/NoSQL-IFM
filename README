OUTLINE:

This code implements an algorithm which performs Inverse Frequent Itemset Mining (IFM) on SQL and no-SQL tables (i.e. with multivalue attributes).
Given a (no)SQL table as input, the algorithm outputs synthetic (no)SQL transactional table which complies with the frequency (and possibly infrequency) constraints built according with the frequent (infrequent) itemsets of the input table. 
The use of infrequency constraints is optional, and identifies the IFM_I problem, i.e. the IFM problem with the addition of infrequency constraints.
The use of infrequency constraints avoid to produce itemsets that are frequent in the output table but not in the input table.

If you use this code, please cite the following paper:

Sacc√°, D., Serra, E., & Rullo, A. (2019). Extending inverse frequent itemsets mining to generate realistic datasets: Complexity, accuracy and emerging applications. Data Mining and Knowledge Discovery, 33(6), 1736-1774.


LIBRARIES:

To use this code you need to import the IBM CPLEX125 and Trove 3.1a1 (or later versions) libraries in your java project.
Both libraries are freely available at:

 - (CPLEX) https://www.ibm.com/developerworks/community/blogs/jfp/entry/CPLEX_Is_Free_For_Students?lang=en
 - (Trove) https://sourceforge.net/projects/trove4j/files/trove/3.0.3/


QUICK START:

First, update the CONF file according to the parameters that identify your particular instance.
Then, run MainClass.java.

The input table must be stored in a text file having: (1) space-separated integer values only, (2) the ';' character at the end of each column, (3) each tuple stored in a line. If your table contains non-integer values, you have to convert it such that each non-integer value is mapped to an integer value.
At the end you can re-convert the output table according to your mapping.
As the IFM problem has been implemented as an optimization problem, during the execution it will appear on the console the current objective value, which must decrease at each iteration, until it get to 0.


IMPORTANT NOTES

 - The behavior of the program could vary with respect to the CPLEX version.
 - With CPLEX125 you may have to reserve more space for the stack using the JVM argument -Xss, as for big instances a "java.lang.StackOverflowError at ilog.concert.IloColumn$Link.install(IloColumn.java:134)" may occur.
 
